/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var compilador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,9],$V2=[1,25],$V3=[1,26],$V4=[1,27],$V5=[1,28],$V6=[1,29],$V7=[1,30],$V8=[1,31],$V9=[1,13],$Va=[1,14],$Vb=[1,15],$Vc=[1,16],$Vd=[1,17],$Ve=[1,21],$Vf=[1,22],$Vg=[1,23],$Vh=[1,24],$Vi=[1,32],$Vj=[1,33],$Vk=[1,34],$Vl=[5,10,14,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,153,154],$Vm=[14,59],$Vn=[2,58],$Vo=[1,41],$Vp=[1,47],$Vq=[14,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,58,59,153,154],$Vr=[14,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,58,59,60,153,154],$Vs=[20,52],$Vt=[2,54],$Vu=[1,60],$Vv=[1,59],$Vw=[1,62],$Vx=[5,10,14,17,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,46,48,58,59,81,83,85,87,88,89,90,92,93,94,95,119,132,133,139,140,142,143,149,150,151,153,154],$Vy=[1,77],$Vz=[1,97],$VA=[1,92],$VB=[1,101],$VC=[1,91],$VD=[1,93],$VE=[1,94],$VF=[1,85],$VG=[1,86],$VH=[1,88],$VI=[1,95],$VJ=[1,98],$VK=[1,99],$VL=[1,100],$VM=[1,114],$VN=[1,113],$VO=[1,121],$VP=[1,128],$VQ=[1,129],$VR=[1,131],$VS=[1,132],$VT=[1,133],$VU=[1,134],$VV=[1,135],$VW=[1,136],$VX=[1,137],$VY=[1,138],$VZ=[1,139],$V_=[20,46,52,54,59,60,61],$V$=[26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,48,153,154],$V01=[1,155],$V11=[48,52],$V21=[1,157],$V31=[5,10,14,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,52,60,63,82,153,154],$V41=[5,10,14,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,48,52,58,60,63,82,109,111,113,115,117,119,121,122,124,125,126,127,129,130,132,133,135,136,153,154],$V51=[2,153],$V61=[5,10,14,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,48,52,60,63,82,153,154],$V71=[5,10,14,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,48,52,54,58,60,63,82,98,99,100,101,102,103,104,105,106,107,109,111,113,115,117,119,121,122,124,125,126,127,129,130,132,133,135,136,153,154],$V81=[1,177],$V91=[5,10,14,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,48,52,54,58,59,60,61,63,82,98,99,100,101,102,103,104,105,106,107,109,111,113,115,117,119,121,122,124,125,126,127,129,130,132,133,135,136,139,140,146,147,153,154],$Va1=[14,17,58,59,119,132,133,139,140,142,143,149,150,151],$Vb1=[5,10,14,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,48,52,60,63,82,109,111,153,154],$Vc1=[1,185],$Vd1=[2,177],$Ve1=[5,10,14,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,48,52,60,63,82,109,111,113,153,154],$Vf1=[1,189],$Vg1=[5,10,14,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,48,52,60,63,82,109,111,113,115,153,154],$Vh1=[1,190],$Vi1=[5,10,14,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,48,52,60,63,82,109,111,113,115,117,153,154],$Vj1=[1,191],$Vk1=[5,10,14,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,48,52,60,63,82,109,111,113,115,117,119,153,154],$Vl1=[1,192],$Vm1=[1,193],$Vn1=[5,10,14,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,48,52,60,63,82,109,111,113,115,117,119,121,122,153,154],$Vo1=[1,194],$Vp1=[1,195],$Vq1=[1,196],$Vr1=[1,197],$Vs1=[5,10,14,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,48,52,60,63,82,109,111,113,115,117,119,121,122,124,125,126,127,153,154],$Vt1=[1,198],$Vu1=[1,199],$Vv1=[5,10,14,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,48,52,60,63,82,109,111,113,115,117,119,121,122,124,125,126,127,129,130,153,154],$Vw1=[1,200],$Vx1=[1,201],$Vy1=[5,10,14,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,48,52,60,63,82,109,111,113,115,117,119,121,122,124,125,126,127,129,130,132,133,153,154],$Vz1=[1,202],$VA1=[1,203],$VB1=[1,204],$VC1=[20,48,52],$VD1=[2,95],$VE1=[14,17,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,46,48,58,59,81,83,85,87,88,89,90,92,93,94,95,119,132,133,139,140,142,143,149,150,151,153,154],$VF1=[14,17,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,46,48,58,59,81,83,85,86,87,88,89,90,92,93,94,95,119,132,133,139,140,142,143,149,150,151,153,154],$VG1=[1,252],$VH1=[52,60];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"external_list":4,"EOF":5,"external":6,"preprocessor_directive":7,"function_definition":8,"declaration":9,"#":10,"INCLUDE":11,"HEADER":12,"DEFINE":13,"ID":14,"define_value_opt":15,"expression":16,"STR_LIT":17,"declaration_specifiers":18,"init_declarator_list":19,";":20,"declarator":21,"compound_statement":22,"type_specifier":23,"type_qualifier":24,"storage_class_specifier":25,"CONST":26,"VOLATILE":27,"AUTO":28,"REGISTER":29,"STATIC":30,"EXTERN":31,"TYPEDEF":32,"CHAR_T":33,"INT_T":34,"FLOAT_T":35,"DOUBLE_T":36,"VOID":37,"struct_specifier":38,"union_specifier":39,"enum_specifier":40,"SHORT_T":41,"LONG_T":42,"SIGNED":43,"UNSIGNED":44,"STRUCT":45,"LBRACE":46,"struct_declaration_list":47,"RBRACE":48,"struct_declaration":49,"struct_declarator_list":50,"struct_declarator":51,",":52,"init_declarator":53,"=":54,"initializer":55,"pointer_opt":56,"direct_declarator":57,"*":58,"(":59,")":60,"[":61,"constant_expression_opt":62,"]":63,"parameter_list_opt":64,"parameter_list_opt_or_void":65,"parameter_list":66,"constant_expression":67,"conditional_expression":68,"assignment_expression":69,"initializer_list":70,"parameter":71,"block_item_list_opt":72,"block_item_list":73,"block_item":74,"statement":75,"labeled_statement":76,"expression_statement":77,"selection_statement":78,"iteration_statement":79,"jump_statement":80,"CASE":81,":":82,"DEFAULT":83,"expression_opt":84,"IF":85,"ELSE":86,"SWITCH":87,"WHILE":88,"DO":89,"FOR":90,"for_declaration":91,"GOTO":92,"CONTINUE":93,"BREAK":94,"RETURN":95,"unary_expression":96,"assignment_operator":97,"PLUS_ASSIGN":98,"MINUS_ASSIGN":99,"MUL_ASSIGN":100,"DIV_ASSIGN":101,"MOD_ASSIGN":102,"AND_ASSIGN":103,"OR_ASSIGN":104,"XOR_ASSIGN":105,"LSHIFT_ASSIGN":106,"RSHIFT_ASSIGN":107,"logical_or_expression":108,"?":109,"logical_and_expression":110,"OR":111,"inclusive_or_expression":112,"AND":113,"exclusive_or_expression":114,"|":115,"and_expression":116,"^":117,"equality_expression":118,"&":119,"relational_expression":120,"EQ":121,"NE":122,"shift_expression":123,"<":124,">":125,"LE":126,"GE":127,"additive_expression":128,"LSHIFT":129,"RSHIFT":130,"multiplicative_expression":131,"+":132,"-":133,"cast_expression":134,"/":135,"%":136,"type_name":137,"postfix_expression":138,"INC":139,"DEC":140,"unary_operator":141,"SIZEOF":142,"!":143,"primary_expression":144,"argument_expression_list_opt":145,".":146,"ARROW":147,"argument_expression_list":148,"INT_LIT":149,"F_LIT":150,"CHAR_LIT":151,"pointer":152,"UNION":153,"ENUM":154,"enumerator_list":155,"enumerator":156,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"#",11:"INCLUDE",12:"HEADER",13:"DEFINE",14:"ID",17:"STR_LIT",20:";",26:"CONST",27:"VOLATILE",28:"AUTO",29:"REGISTER",30:"STATIC",31:"EXTERN",32:"TYPEDEF",33:"CHAR_T",34:"INT_T",35:"FLOAT_T",36:"DOUBLE_T",37:"VOID",41:"SHORT_T",42:"LONG_T",43:"SIGNED",44:"UNSIGNED",45:"STRUCT",46:"LBRACE",48:"RBRACE",52:",",54:"=",58:"*",59:"(",60:")",61:"[",63:"]",81:"CASE",82:":",83:"DEFAULT",85:"IF",86:"ELSE",87:"SWITCH",88:"WHILE",89:"DO",90:"FOR",92:"GOTO",93:"CONTINUE",94:"BREAK",95:"RETURN",98:"PLUS_ASSIGN",99:"MINUS_ASSIGN",100:"MUL_ASSIGN",101:"DIV_ASSIGN",102:"MOD_ASSIGN",103:"AND_ASSIGN",104:"OR_ASSIGN",105:"XOR_ASSIGN",106:"LSHIFT_ASSIGN",107:"RSHIFT_ASSIGN",109:"?",111:"OR",113:"AND",115:"|",117:"^",119:"&",121:"EQ",122:"NE",124:"<",125:">",126:"LE",127:"GE",129:"LSHIFT",130:"RSHIFT",132:"+",133:"-",135:"/",136:"%",139:"INC",140:"DEC",142:"SIZEOF",143:"!",146:".",147:"ARROW",149:"INT_LIT",150:"F_LIT",151:"CHAR_LIT",153:"UNION",154:"ENUM"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[4,1],[6,1],[6,1],[6,1],[7,3],[7,4],[15,1],[15,1],[15,0],[9,3],[9,2],[9,3],[8,3],[18,2],[18,2],[18,2],[18,1],[18,1],[18,1],[24,1],[24,1],[25,1],[25,1],[25,1],[25,1],[25,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[38,5],[38,4],[38,2],[47,1],[47,2],[49,3],[50,1],[50,3],[51,1],[19,1],[19,3],[53,1],[53,3],[21,2],[56,2],[56,0],[57,1],[57,3],[57,4],[57,4],[65,1],[65,1],[65,0],[62,1],[62,0],[67,1],[55,1],[55,3],[70,1],[70,3],[64,1],[64,0],[66,1],[66,3],[71,2],[22,3],[72,1],[72,0],[73,2],[73,1],[74,1],[74,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[76,4],[76,3],[77,2],[84,1],[84,0],[78,5],[78,7],[78,5],[79,5],[79,7],[79,9],[79,9],[80,3],[80,2],[80,2],[80,3],[16,1],[16,3],[69,3],[69,3],[69,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[68,1],[68,5],[108,1],[108,3],[110,1],[110,3],[112,1],[112,3],[114,1],[114,3],[116,1],[116,3],[118,1],[118,3],[118,3],[120,1],[120,3],[120,3],[120,3],[120,3],[123,1],[123,3],[123,3],[128,1],[128,3],[128,3],[131,1],[131,3],[131,3],[131,3],[134,1],[134,4],[96,1],[96,2],[96,2],[96,2],[96,2],[96,4],[141,1],[141,1],[141,1],[141,1],[141,1],[138,1],[138,4],[138,4],[138,3],[138,3],[138,2],[138,2],[145,1],[145,0],[148,1],[148,3],[144,1],[144,1],[144,1],[144,1],[144,1],[144,3],[137,1],[137,2],[152,1],[152,2],[39,5],[39,4],[39,2],[40,5],[40,4],[40,2],[155,1],[155,3],[156,1],[156,3],[91,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log('\nTabela de Símbolos Final:');
        allSymbols.forEach(s => console.log(`${s.name} : ${s.type} : escopo ${s.scope}`));

        console.log('\nCódigo de Três Endereços:');
        tac.forEach(line => console.log(line));

        if (semanticErrors.length > 0) {
          console.log('\nErros Semânticos encontrados:');
          semanticErrors.forEach(e => console.log('- ' + e));
        } else {
          console.log('\nNenhum erro semântico encontrado.');
        }

        console.log('\nÁrvore Sintática (AST) do programa:');
        printAST($$[$0-1]);  // $$[$0-1] é external_list com filhos
      
break;
case 2: case 4:

        this.$ = { type: 'ExternalList', children: $$[$0-1].children.concat([$$[$0]]) };
      
break;
case 3: case 5:

        this.$ = { type: 'ExternalList', children: [$$[$0]] };
      
break;
case 9:

        this.$ = { type: 'PreprocessorInclude', value: $$[$0] };
      
break;
case 10:

        this.$ = { type: 'PreprocessorDefine', id: $$[$0-1], value: $$[$0] };
      
break;
case 14: case 16:

        this.$ = { type: 'Declaration', specifiers: $$[$0-2], initDeclarators: $$[$0-1] };
      
break;
case 15:

        this.$ = { type: 'Declaration', specifiers: $$[$0-1] };
      
break;
case 18: case 19: case 20:
 this.$ = { type: 'DeclarationSpecifiers', children: $$[$0-1].children.concat([$$[$0]]) }; 
break;
case 21: case 22: case 23:
 this.$ = { type: 'DeclarationSpecifiers', children: [$$[$0]] }; 
break;
case 31:
 this.$ = { type: 'char' }; __tipoDecl = 'char'; 
break;
case 32:
 this.$ = { type: 'int' }; __tipoDecl = 'int'; 
break;
case 33:
 this.$ = { type: 'float' }; __tipoDecl = 'float'; 
break;
case 34:
 this.$ = { type: 'double' }; __tipoDecl = 'double'; 
break;
case 35:
 this.$ = { type: 'void' }; __tipoDecl = 'void'; 
break;
case 39:
 this.$ = { type: 'short' }; 
break;
case 40:
 this.$ = { type: 'long' }; 
break;
case 41:
 this.$ = { type: 'signed' }; 
break;
case 42:
 this.$ = { type: 'unsigned' }; 
break;
case 54:

        addSymbol($$[$0].name, __tipoDecl + $$[$0].pointer);
        this.$ = { type: 'InitDeclarator', name: $$[$0].name, pointer: $$[$0].pointer };
      
break;
case 55:

        addSymbol($$[$0-2].name, __tipoDecl + $$[$0-2].pointer);
        this.$ = { type: 'InitDeclarator', name: $$[$0-2].name, pointer: $$[$0-2].pointer, init: $$[$0] };
      
break;
case 56:
 this.$ = { pointer: $$[$0-1], name: $$[$0] }; 
break;
case 57:
 this.$ = '*' + ($$[$0] || ''); 
break;
case 58:
 this.$ = ''; 
break;
case 59: case 94: case 154: case 156: case 157: case 158:
 this.$ = $$[$0]; 
break;
case 60:
 this.$ = $$[$0-1].name; 
break;
case 61: case 62:
 this.$ = $$[$0-3].name; 
break;
case 95:
 this.$ = { type:'void' }; 
break;
case 109:
 
      this.$ = checkBin('=',  $$[$0-2], $$[$0]);
      this.$ .ast = node('=', $$[$0-2].ast, $$[$0].ast);
      emitTAC(this.$.ast);
     
break;
case 110:

      this.$ = checkBin($$[$0-1], $$[$0-2], $$[$0]);
      this.$ .ast = node($$[$0-1], $$[$0-2].ast, $$[$0].ast);
      emitTAC(this.$.ast);
    
break;
case 124:
 this.$ = { type: $$[$0-2].type }; /* condição → int, mas resultado herda braço */ 
break;
case 126:
 
        this.$ = checkBin('||', $$[$0-2], $$[$0]); 
        this.$ .ast = node('||', $$[$0-2].ast, $$[$0].ast);
      
break;
case 128:
 
        this.$ = checkBin('&&', $$[$0-2], $$[$0]);
        this.$ .ast = node('||', $$[$0-2].ast, $$[$0].ast);
      
break;
case 130:

        this.$ = checkBin('|', $$[$0-2], $$[$0]);
        this.$ .ast = node('|', $$[$0-2].ast, $$[$0].ast);
      
break;
case 132:

        this.$ = checkBin('^', $$[$0-2], $$[$0]);
        this.$ .ast = node('^', $$[$0-2].ast, $$[$0].ast);
      
break;
case 134:

        this.$ = checkBin('&', $$[$0-2], $$[$0]);
        this.$ .ast = node('&', $$[$0-2].ast, $$[$0].ast);
      
break;
case 136:

        this.$ = checkBin('==', $$[$0-2], $$[$0]);
        this.$ .ast = node('==', $$[$0-2].ast, $$[$0].ast);
      
break;
case 137:

        this.$ = checkBin('!=', $$[$0-2], $$[$0]);
        this.$ .ast = node('!=', $$[$0-2].ast, $$[$0].ast);
      
break;
case 139:

        this.$ = checkBin('<', $$[$0-2], $$[$0]);
        this.$ .ast = node('<', $$[$0-2].ast, $$[$0].ast);
      
break;
case 140:

        this.$ = checkBin('>', $$[$0-2], $$[$0]);
        this.$ .ast = node('>', $$[$0-2].ast, $$[$0].ast);
      
break;
case 141:

        this.$ = checkBin('<=', $$[$0-2], $$[$0]);
        this.$ .ast = node('<=', $$[$0-2].ast, $$[$0].ast);
      
break;
case 142:

        this.$ = checkBin('>=', $$[$0-2], $$[$0]);
        this.$ .ast = node('>=', $$[$0-2].ast, $$[$0].ast);
      
break;
case 144:

        this.$ = checkBin('<<', $$[$0-2], $$[$0]);
        this.$ .ast = node('<<', $$[$0-2].ast, $$[$0].ast);
      
break;
case 145:

        this.$ = checkBin('>>', $$[$0-2], $$[$0]);
        this.$ .ast = node('>>', $$[$0-2].ast, $$[$0].ast);
      
break;
case 147:

        this.$ = checkBin('+', $$[$0-2], $$[$0]);
        this.$ .ast = node('+', $$[$0-2].ast, $$[$0].ast);
      
break;
case 148:

        this.$ = checkBin('-', $$[$0-2], $$[$0]);
        this.$ .ast = node('-', $$[$0-2].ast, $$[$0].ast);
      
break;
case 150:

        this.$ = checkBin('*', $$[$0-2], $$[$0]);
        this.$ .ast = node('*', $$[$0-2].ast, $$[$0].ast);
      
break;
case 151:

        this.$ = checkBin('/', $$[$0-2], $$[$0]);
        this.$ .ast = node('/', $$[$0-2].ast, $$[$0].ast);
      
break;
case 152:

        this.$ = checkBin('%', $$[$0-2], $$[$0]);
        this.$ .ast = node('%', $$[$0-2].ast, $$[$0].ast);
      
break;
case 159: case 160:
 this.$ = { type: 'int' }; 
break;
case 166:
 this.$ = { type: $$[$0].type, ast: $$[$0].ast }; 
break;
case 167:

        let baseType = $$[$0-3].type;
        if (baseType.endsWith('*')) {
          baseType = baseType.slice(0, -1).trim();
        }
        this.$ = { type: baseType, ast: node('[]', $$[$0-3].ast, $$[$0-1].ast) };
      
break;
case 168:
 this.$ = { type: $$[$0-3].type, ast: node('call', $$[$0-3].ast, $$[$0-1] ? $$[$0-1].ast : null) }; 
break;
case 169:
 this.$ = { type: $$[$0-2].type, ast: node('.', $$[$0-2].ast, null, $$[$0]) }; 
break;
case 170:
 this.$ = { type: $$[$0-2].type, ast: node('->', $$[$0-2].ast, null, $$[$0]) }; 
break;
case 171:
 this.$ = { type: $$[$0-1].type, ast: node('++', $$[$0-1].ast, null) }; 
break;
case 172:
 this.$ = { type: $$[$0-1].type, ast: node('--', $$[$0-1].ast, null) }; 
break;
case 173:
 this.$ = { ast: { type: 'ArgList', children: $$[$0] } }; 
break;
case 174:
 this.$ = null; 
break;
case 175:
 this.$ = [$$[$0]]; 
break;
case 176:
 this.$ = $$[$0-2].concat([$$[$0]]); 
break;
case 177:
 const s = findSymbol($$[$0]); this.$ = { type:s.type, ast: node('ID',null,null, $$[$0]) }; 
break;
case 178:
 this.$ = { type:'int',   ast: node('INT',null,null, yytext) }; 
break;
case 179:
 this.$ = { type:'float', ast: node('FLOAT',null,null, yytext) }; 
break;
case 180:
 this.$ = { type:'char', ast: node('CHAR',null,null, yytext) }; 
break;
case 181:
 this.$ = { type:'char*', ast: node('STR',null,null, yytext) }; 
break;
case 182:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,14:$V1,18:8,23:10,24:11,25:12,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:18,39:19,40:20,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,153:$Vj,154:$Vk},{1:[3]},{5:[1,35],6:36,7:4,8:5,9:6,10:$V0,14:$V1,18:8,23:10,24:11,25:12,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:18,39:19,40:20,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,153:$Vj,154:$Vk},o($Vl,[2,3]),o($Vl,[2,6]),o($Vl,[2,7]),o($Vl,[2,8]),{11:[1,37],13:[1,38]},o($Vm,$Vn,{38:18,39:19,40:20,21:39,19:40,23:42,24:43,25:44,56:45,53:46,20:$Vo,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,58:$Vp,153:$Vj,154:$Vk}),o($Vm,$Vn,{56:45,53:46,19:48,21:49,58:$Vp}),o($Vq,[2,21]),o($Vq,[2,22]),o($Vq,[2,23]),o($Vr,[2,31]),o($Vr,[2,32]),o($Vr,[2,33]),o($Vr,[2,34]),o($Vr,[2,35]),o($Vr,[2,36]),o($Vr,[2,37]),o($Vr,[2,38]),o($Vr,[2,39]),o($Vr,[2,40]),o($Vr,[2,41]),o($Vr,[2,42]),o($Vq,[2,24]),o($Vq,[2,25]),o($Vq,[2,26]),o($Vq,[2,27]),o($Vq,[2,28]),o($Vq,[2,29]),o($Vq,[2,30]),{14:[1,50],46:[1,51]},{14:[1,52],46:[1,53]},{14:[1,54],46:[1,55]},{1:[2,1]},o($Vl,[2,2]),{12:[1,56]},{14:[1,57]},o($Vs,$Vt,{22:58,46:$Vu,54:$Vv}),{20:[1,61],52:$Vw},o($Vx,[2,15]),o($Vq,[2,18]),o($Vq,[2,19]),o($Vq,[2,20]),{14:[1,64],57:63,59:[1,65]},o($Vs,[2,52]),o($Vm,$Vn,{56:66,58:$Vp}),{20:[1,67],52:$Vw},o($Vs,$Vt,{54:$Vv}),o($Vr,[2,45],{46:[1,68]}),{18:71,23:10,24:11,25:12,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:18,39:19,40:20,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,47:69,49:70,153:$Vj,154:$Vk},o($Vr,[2,189],{46:[1,72]}),{18:71,23:10,24:11,25:12,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:18,39:19,40:20,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,47:73,49:70,153:$Vj,154:$Vk},o($Vr,[2,192],{46:[1,74]}),{14:$Vy,155:75,156:76},o($Vl,[2,9]),o([5,10,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,153,154],[2,13],{15:78,16:79,69:81,96:82,68:83,138:84,141:87,108:89,144:90,110:96,112:102,114:103,116:104,118:105,120:106,123:107,128:108,131:109,134:110,14:$Vz,17:[1,80],58:$VA,59:$VB,119:$VC,132:$VD,133:$VE,139:$VF,140:$VG,142:$VH,143:$VI,149:$VJ,150:$VK,151:$VL}),o($Vl,[2,17]),{14:$Vz,17:$VM,46:$VN,55:111,58:$VA,59:$VB,68:83,69:112,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},o([20,48],[2,80],{23:10,24:11,25:12,38:18,39:19,40:20,69:81,96:82,68:83,138:84,141:87,108:89,144:90,110:96,112:102,114:103,116:104,118:105,120:106,123:107,128:108,131:109,134:110,72:115,73:116,74:117,9:118,75:119,18:120,76:122,22:123,77:124,78:125,79:126,80:127,84:130,16:140,14:$VO,17:$VM,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vu,58:$VA,59:$VB,81:$VP,83:$VQ,85:$VR,87:$VS,88:$VT,89:$VU,90:$VV,92:$VW,93:$VX,94:$VY,95:$VZ,119:$VC,132:$VD,133:$VE,139:$VF,140:$VG,142:$VH,143:$VI,149:$VJ,150:$VK,151:$VL,153:$Vj,154:$Vk}),o($Vx,[2,14]),o($Vm,$Vn,{56:45,21:49,53:141,58:$Vp}),o([20,46,52,54,60],[2,56],{59:[1,143],61:[1,142]}),o($V_,[2,59]),o($Vm,$Vn,{56:45,21:144,58:$Vp}),o($Vm,[2,57]),o($Vx,[2,16]),{18:71,23:10,24:11,25:12,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:18,39:19,40:20,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,47:145,49:70,153:$Vj,154:$Vk},{18:71,23:10,24:11,25:12,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:18,39:19,40:20,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,48:[1,146],49:147,153:$Vj,154:$Vk},o($V$,[2,46]),o($Vm,$Vn,{38:18,39:19,40:20,23:42,24:43,25:44,56:45,50:148,51:149,21:150,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,58:$Vp,153:$Vj,154:$Vk}),{18:71,23:10,24:11,25:12,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:18,39:19,40:20,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,47:151,49:70,153:$Vj,154:$Vk},{18:71,23:10,24:11,25:12,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:18,39:19,40:20,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,48:[1,152],49:147,153:$Vj,154:$Vk},{14:$Vy,155:153,156:76},{48:[1,154],52:$V01},o($V11,[2,193]),o($V11,[2,195],{54:[1,156]}),o($Vl,[2,10]),o($Vl,[2,11],{52:$V21}),o([5,10,14,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,52,54,58,59,61,98,99,100,101,102,103,104,105,106,107,109,111,113,115,117,119,121,122,124,125,126,127,129,130,132,133,135,136,139,140,146,147,153,154],[2,12]),o($V31,[2,107]),o($V41,$V51,{97:159,54:[1,158],98:[1,160],99:[1,161],100:[1,162],101:[1,163],102:[1,164],103:[1,165],104:[1,166],105:[1,167],106:[1,168],107:[1,169]}),o($V61,[2,111]),o($V71,[2,155],{59:[1,171],61:[1,170],139:[1,174],140:[1,175],146:[1,172],147:[1,173]}),{14:$Vz,17:$VM,58:$VA,59:$V81,96:176,119:$VC,132:$VD,133:$VE,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$V81,96:178,119:$VC,132:$VD,133:$VE,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,119:$VC,132:$VD,133:$VE,134:179,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:[1,182],96:181,119:$VC,132:$VD,133:$VE,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},o($V61,[2,123],{109:[1,183],111:[1,184]}),o($V91,[2,166]),o($Va1,[2,161]),o($Va1,[2,162]),o($Va1,[2,163]),o($Va1,[2,164]),o($Va1,[2,165]),o($Vb1,[2,125],{113:$Vc1}),o($V91,$Vd1),o($V91,[2,178]),o($V91,[2,179]),o($V91,[2,180]),{14:$Vz,16:186,17:$VM,23:188,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:18,39:19,40:20,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,58:$VA,59:$VB,68:83,69:81,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,137:187,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL,153:$Vj,154:$Vk},o($Ve1,[2,127],{115:$Vf1}),o($Vg1,[2,129],{117:$Vh1}),o($Vi1,[2,131],{119:$Vj1}),o($Vk1,[2,133],{121:$Vl1,122:$Vm1}),o($Vn1,[2,135],{124:$Vo1,125:$Vp1,126:$Vq1,127:$Vr1}),o($Vs1,[2,138],{129:$Vt1,130:$Vu1}),o($Vv1,[2,143],{132:$Vw1,133:$Vx1}),o($Vy1,[2,146],{58:$Vz1,135:$VA1,136:$VB1}),o($V41,[2,149]),o($Vs,[2,55]),o($VC1,[2,69]),{14:$Vz,17:$VM,46:$VN,55:206,58:$VA,59:$VB,68:83,69:112,70:205,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},o($V91,[2,181]),{48:[1,207]},{9:118,14:$VO,16:140,17:$VM,18:120,20:$VD1,22:123,23:10,24:11,25:12,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:18,39:19,40:20,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vu,48:[2,79],58:$VA,59:$VB,68:83,69:81,74:208,75:119,76:122,77:124,78:125,79:126,80:127,81:$VP,83:$VQ,84:130,85:$VR,87:$VS,88:$VT,89:$VU,90:$VV,92:$VW,93:$VX,94:$VY,95:$VZ,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL,153:$Vj,154:$Vk},o($VE1,[2,82]),o($VE1,[2,83]),o($VE1,[2,84]),o($Vm,$Vn,{38:18,39:19,40:20,19:40,23:42,24:43,25:44,56:45,53:46,21:49,20:$Vo,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,58:$Vp,153:$Vj,154:$Vk}),o([20,52,54,59,61,98,99,100,101,102,103,104,105,106,107,109,111,113,115,117,119,121,122,124,125,126,127,129,130,132,133,135,136,139,140,146,147],$Vd1,{56:45,53:46,19:48,21:49,14:$Vn,58:$Vp}),o($VF1,[2,85]),o($VF1,[2,86]),o($VF1,[2,87]),o($VF1,[2,88]),o($VF1,[2,89]),o($VF1,[2,90]),{14:$Vz,17:$VM,58:$VA,59:$VB,67:209,68:210,96:180,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{82:[1,211]},{20:[1,212]},{59:[1,213]},{59:[1,214]},{59:[1,215]},{14:$Vz,16:140,17:$VM,20:$VD1,22:123,46:$Vu,58:$VA,59:$VB,68:83,69:81,75:216,76:122,77:124,78:125,79:126,80:127,81:$VP,83:$VQ,84:130,85:$VR,87:$VS,88:$VT,89:$VU,90:$VV,92:$VW,93:$VX,94:$VY,95:$VZ,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{59:[1,217]},{14:[1,218]},{20:[1,219]},{20:[1,220]},{14:$Vz,16:140,17:$VM,20:$VD1,58:$VA,59:$VB,68:83,69:81,84:221,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},o([20,60],[2,94],{52:$V21}),o($Vs,[2,53]),{14:$Vz,17:$VM,58:$VA,59:$VB,62:222,63:[2,67],67:223,68:210,96:180,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{18:227,23:10,24:11,25:12,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:18,39:19,40:20,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,60:[2,74],64:224,66:225,71:226,153:$Vj,154:$Vk},{60:[1,228]},{18:71,23:10,24:11,25:12,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:18,39:19,40:20,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,48:[1,229],49:147,153:$Vj,154:$Vk},o($Vr,[2,44]),o($V$,[2,47]),{20:[1,230],52:[1,231]},o($Vs,[2,49]),o($Vs,[2,51]),{18:71,23:10,24:11,25:12,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:18,39:19,40:20,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,48:[1,232],49:147,153:$Vj,154:$Vk},o($Vr,[2,188]),{48:[1,233],52:$V01},o($Vr,[2,191]),{14:$Vy,156:234},{14:$Vz,17:$VM,58:$VA,59:$VB,67:235,68:210,96:180,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,68:83,69:236,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,68:83,69:237,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,68:83,69:238,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},o($Va1,[2,113]),o($Va1,[2,114]),o($Va1,[2,115]),o($Va1,[2,116]),o($Va1,[2,117]),o($Va1,[2,118]),o($Va1,[2,119]),o($Va1,[2,120]),o($Va1,[2,121]),o($Va1,[2,122]),{14:$Vz,16:239,17:$VM,58:$VA,59:$VB,68:83,69:81,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,60:[2,174],68:83,69:242,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,145:240,148:241,149:$VJ,150:$VK,151:$VL},{14:[1,243]},{14:[1,244]},o($V91,[2,171]),o($V91,[2,172]),o($V71,[2,156]),{14:$Vz,16:186,17:$VM,58:$VA,59:$VB,68:83,69:81,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},o($V71,[2,157]),o($V71,[2,158]),o($V71,$V51),o($V71,[2,159]),{14:$Vz,16:186,17:$VM,23:188,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:18,39:19,40:20,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,58:$VA,59:$VB,68:83,69:81,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,137:245,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL,153:$Vj,154:$Vk},{14:$Vz,16:246,17:$VM,58:$VA,59:$VB,68:83,69:81,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,110:247,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,112:248,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{52:$V21,60:[1,249]},{60:[1,250]},{58:$VG1,60:[2,183],152:251},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,114:253,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,116:254,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,118:255,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,119:$VC,120:256,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,119:$VC,120:257,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,119:$VC,123:258,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,119:$VC,123:259,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,119:$VC,123:260,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,119:$VC,123:261,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,119:$VC,128:262,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,119:$VC,128:263,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,119:$VC,131:264,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,119:$VC,131:265,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,119:$VC,132:$VD,133:$VE,134:266,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,119:$VC,132:$VD,133:$VE,134:267,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,119:$VC,132:$VD,133:$VE,134:268,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{48:[1,269],52:[1,270]},o($V11,[2,71]),o([5,10,14,17,20,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,46,48,58,59,81,83,85,86,87,88,89,90,92,93,94,95,119,132,133,139,140,142,143,149,150,151,153,154],[2,78]),o($VE1,[2,81]),{82:[1,271]},o([48,52,63,82],[2,68]),{14:$Vz,16:140,17:$VM,20:$VD1,22:123,46:$Vu,58:$VA,59:$VB,68:83,69:81,75:272,76:122,77:124,78:125,79:126,80:127,81:$VP,83:$VQ,84:130,85:$VR,87:$VS,88:$VT,89:$VU,90:$VV,92:$VW,93:$VX,94:$VY,95:$VZ,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},o($VF1,[2,93]),{14:$Vz,16:273,17:$VM,58:$VA,59:$VB,68:83,69:81,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,16:274,17:$VM,58:$VA,59:$VB,68:83,69:81,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,16:275,17:$VM,58:$VA,59:$VB,68:83,69:81,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{88:[1,276]},{14:$Vz,16:140,17:$VM,18:279,20:$VD1,23:10,24:11,25:12,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:18,39:19,40:20,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,58:$VA,59:$VB,68:83,69:81,84:277,91:278,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL,153:$Vj,154:$Vk},{20:[1,280]},o($VF1,[2,104]),o($VF1,[2,105]),{20:[1,281]},{63:[1,282]},{63:[2,66]},{60:[1,283]},{52:[1,284],60:[2,73]},o($VH1,[2,75]),o($Vm,$Vn,{38:18,39:19,40:20,23:42,24:43,25:44,56:45,21:285,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,58:$Vp,153:$Vj,154:$Vk}),o($V_,[2,60]),o($Vr,[2,43]),o($V$,[2,48]),o($Vm,$Vn,{56:45,21:150,51:286,58:$Vp}),o($Vr,[2,187]),o($Vr,[2,190]),o($V11,[2,194]),o($V11,[2,196]),o($V31,[2,108]),o($V61,[2,109]),o($V61,[2,110]),{52:$V21,63:[1,287]},{60:[1,288]},{52:[1,289],60:[2,173]},o($VH1,[2,175]),o($V91,[2,169]),o($V91,[2,170]),{60:[1,290]},{52:$V21,82:[1,291]},o($Vb1,[2,126],{113:$Vc1}),o($Ve1,[2,128],{115:$Vf1}),o($V91,[2,182]),{14:$Vz,17:$VM,58:$VA,59:$VB,96:180,119:$VC,132:$VD,133:$VE,134:292,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{60:[2,184]},{58:$VG1,60:[2,185],152:293},o($Vg1,[2,130],{117:$Vh1}),o($Vi1,[2,132],{119:$Vj1}),o($Vk1,[2,134],{121:$Vl1,122:$Vm1}),o($Vn1,[2,136],{124:$Vo1,125:$Vp1,126:$Vq1,127:$Vr1}),o($Vn1,[2,137],{124:$Vo1,125:$Vp1,126:$Vq1,127:$Vr1}),o($Vs1,[2,139],{129:$Vt1,130:$Vu1}),o($Vs1,[2,140],{129:$Vt1,130:$Vu1}),o($Vs1,[2,141],{129:$Vt1,130:$Vu1}),o($Vs1,[2,142],{129:$Vt1,130:$Vu1}),o($Vv1,[2,144],{132:$Vw1,133:$Vx1}),o($Vv1,[2,145],{132:$Vw1,133:$Vx1}),o($Vy1,[2,147],{58:$Vz1,135:$VA1,136:$VB1}),o($Vy1,[2,148],{58:$Vz1,135:$VA1,136:$VB1}),o($V41,[2,150]),o($V41,[2,151]),o($V41,[2,152]),o($VC1,[2,70]),{14:$Vz,17:$VM,46:$VN,55:294,58:$VA,59:$VB,68:83,69:112,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,16:140,17:$VM,20:$VD1,22:123,46:$Vu,58:$VA,59:$VB,68:83,69:81,75:295,76:122,77:124,78:125,79:126,80:127,81:$VP,83:$VQ,84:130,85:$VR,87:$VS,88:$VT,89:$VU,90:$VV,92:$VW,93:$VX,94:$VY,95:$VZ,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},o($VF1,[2,92]),{52:$V21,60:[1,296]},{52:$V21,60:[1,297]},{52:$V21,60:[1,298]},{59:[1,299]},{20:[1,300]},{20:[1,301]},o($Vm,$Vn,{38:18,39:19,40:20,23:42,24:43,25:44,56:45,53:46,21:49,19:302,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,58:$Vp,153:$Vj,154:$Vk}),o($VF1,[2,103]),o($VF1,[2,106]),o($V_,[2,61]),o($V_,[2,62]),{18:227,23:10,24:11,25:12,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:18,39:19,40:20,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,71:303,153:$Vj,154:$Vk},o($VH1,[2,77]),o($Vs,[2,50]),o($V91,[2,167]),o($V91,[2,168]),{14:$Vz,17:$VM,58:$VA,59:$VB,68:83,69:304,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},o($V71,[2,160]),{14:$Vz,17:$VM,58:$VA,59:$VB,68:305,96:180,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},o($V71,[2,154]),{60:[2,186]},o($V11,[2,72]),o($VF1,[2,91]),{14:$Vz,16:140,17:$VM,20:$VD1,22:123,46:$Vu,58:$VA,59:$VB,68:83,69:81,75:306,76:122,77:124,78:125,79:126,80:127,81:$VP,83:$VQ,84:130,85:$VR,87:$VS,88:$VT,89:$VU,90:$VV,92:$VW,93:$VX,94:$VY,95:$VZ,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,16:140,17:$VM,20:$VD1,22:123,46:$Vu,58:$VA,59:$VB,68:83,69:81,75:307,76:122,77:124,78:125,79:126,80:127,81:$VP,83:$VQ,84:130,85:$VR,87:$VS,88:$VT,89:$VU,90:$VV,92:$VW,93:$VX,94:$VY,95:$VZ,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,16:140,17:$VM,20:$VD1,22:123,46:$Vu,58:$VA,59:$VB,68:83,69:81,75:308,76:122,77:124,78:125,79:126,80:127,81:$VP,83:$VQ,84:130,85:$VR,87:$VS,88:$VT,89:$VU,90:$VV,92:$VW,93:$VX,94:$VY,95:$VZ,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,16:309,17:$VM,58:$VA,59:$VB,68:83,69:81,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,16:140,17:$VM,20:$VD1,58:$VA,59:$VB,68:83,69:81,84:310,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,16:140,17:$VM,20:$VD1,58:$VA,59:$VB,68:83,69:81,84:311,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{20:[2,197],52:$Vw},o($VH1,[2,76]),o($VH1,[2,176]),o($V61,[2,124]),o($VE1,[2,96],{86:[1,312]}),o($VF1,[2,98]),o($VF1,[2,99]),{52:$V21,60:[1,313]},{20:[1,314]},{20:[1,315]},{14:$Vz,16:140,17:$VM,20:$VD1,22:123,46:$Vu,58:$VA,59:$VB,68:83,69:81,75:316,76:122,77:124,78:125,79:126,80:127,81:$VP,83:$VQ,84:130,85:$VR,87:$VS,88:$VT,89:$VU,90:$VV,92:$VW,93:$VX,94:$VY,95:$VZ,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{20:[1,317]},{14:$Vz,16:140,17:$VM,58:$VA,59:$VB,60:$VD1,68:83,69:81,84:318,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,16:140,17:$VM,58:$VA,59:$VB,60:$VD1,68:83,69:81,84:319,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},o($VF1,[2,97]),o($VF1,[2,100]),{60:[1,320]},{60:[1,321]},{14:$Vz,16:140,17:$VM,20:$VD1,22:123,46:$Vu,58:$VA,59:$VB,68:83,69:81,75:322,76:122,77:124,78:125,79:126,80:127,81:$VP,83:$VQ,84:130,85:$VR,87:$VS,88:$VT,89:$VU,90:$VV,92:$VW,93:$VX,94:$VY,95:$VZ,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},{14:$Vz,16:140,17:$VM,20:$VD1,22:123,46:$Vu,58:$VA,59:$VB,68:83,69:81,75:323,76:122,77:124,78:125,79:126,80:127,81:$VP,83:$VQ,84:130,85:$VR,87:$VS,88:$VT,89:$VU,90:$VV,92:$VW,93:$VX,94:$VY,95:$VZ,96:82,108:89,110:96,112:102,114:103,116:104,118:105,119:$VC,120:106,123:107,128:108,131:109,132:$VD,133:$VE,134:110,138:84,139:$VF,140:$VG,141:87,142:$VH,143:$VI,144:90,149:$VJ,150:$VK,151:$VL},o($VF1,[2,101]),o($VF1,[2,102])],
defaultActions: {35:[2,1],223:[2,66],251:[2,184],293:[2,186]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* ------------ CONTROLE DE ESCOPO & TIPO ------------ */
let currentScope = 0;            // 0 = global
let allSymbols = [];
let symbolTable  = [];           // { name, type, scope }
let semanticErrors = [];
let tac = [];                   // lista do código intermediário
let tempCount = 0;              // contador para temporários

function printAST(node, indent = 0) {
  if (node === null || node === undefined) return;
  const pad = '  '.repeat(indent);

  // Se for string ou número, imprime como token
  if (typeof node === 'string' || typeof node === 'number') {
    console.log(`${pad}Token: ${node}`);
    return;
  }

  // Se for array, imprime cada elemento
  if (Array.isArray(node)) {
    node.forEach(child => printAST(child, indent));
    return;
  }

  // Se tiver propriedade 'op' (nó AST de expressão)
  if (node.op) {
    console.log(`${pad}Op: ${node.op}${node.lex ? ` (lex: ${node.lex})` : ''}`);
    if (node.left) printAST(node.left, indent + 1);
    if (node.right) printAST(node.right, indent + 1);
    return;
  }

  // Se tiver tipo e filhos (objeto composto)
  if (node.type) {
    console.log(`${pad}Type: ${node.type}`);

    // Imprime filhos, se existirem
    if (node.children && node.children.length > 0) {
      node.children.forEach(child => printAST(child, indent + 1));
    }

    // Imprime propriedades extras além de type e children
    for (const key in node) {
      if (key !== 'type' && key !== 'children' && node[key] && typeof node[key] !== 'object') {
        console.log(`${pad}  ${key}: ${node[key]}`);
      }
    }
    return;
  }

  // Caso genérico: imprime JSON
  console.log(`${pad}Node: ${JSON.stringify(node)}`);
}

function newTemp() {
  const t = `t${++tempCount}`;
  console.log(`[newTemp] Gerado temporário: ${t}`);
  return t;
}

// Nó da árvore sintática
function node(op, left, right, lex) {
  console.log(`[node] Criando nó AST: op='${op}', lex='${lex || ""}'`);
  return { op, left, right, lex };
}

// Geração do código de três endereços a partir da AST
function emitTAC(ast) {
  if (!ast) return null;

  // Nós folha
  if (['ID', 'INT', 'FLOAT', 'CHAR', 'STR'].includes(ast.op)) {
    return ast.lex;
  }

  // Recursão nos filhos, pode ser null ou undefined
  const a = emitTAC(ast.left);
  const b = emitTAC(ast.right);

  const leftVal = a !== undefined && a !== null ? a : '';
  const rightVal = b !== undefined && b !== null ? b : '';

  const t = newTemp();

  // Trate operadores unários / chamadas especiais
  if (!rightVal) {
    // Exemplo para chamada sem argumentos ou operadores unários
    tac.push(`${t} = ${ast.op} ${leftVal}`.trim());
  } else {
    tac.push(`${t} = ${leftVal} ${ast.op} ${rightVal}`.trim());
  }

  return t;
}



/* Escopo vem do léxico (enterScope/exitScope) */
function enterScope ()  {
  currentScope++;
  console.log(`[enterScope] Entrando no escopo ${currentScope}`);
}
function exitScope  ()  {
  console.log(`[exitScope] Saindo do escopo ${currentScope}`);
  currentScope--;
  symbolTable = symbolTable.filter(s => s.scope <= currentScope);
}

/* Função para registrar erros */
function reportError(msg) {
  semanticErrors.push(msg);
  console.warn(`[reportError] ${msg}`);
}

/* ----------- tabela de símbolos ------------ */
function addSymbol(name, type) {
  // Verifica se já existe variável com mesmo nome no escopo atual
  const exists = symbolTable.some(s => s.name === name && s.scope === currentScope);
  if (exists) {
    reportError(`Variável '${name}' já declarada no escopo ${currentScope}`);
  } else {
    symbolTable.push({name, type, scope: currentScope});
    allSymbols.push({name, type, scope: currentScope});
    console.log(`[addSymbol] Adicionada variável '${name}' do tipo '${type}' no escopo ${currentScope}`);
  }
}

/* Busca variável visível mais interna, sem lançar erro */
function findSymbol(name) {
  for (let i = symbolTable.length - 1; i >= 0; --i) {
    const s = symbolTable[i];
    if (s.name === name && s.scope <= currentScope) {
      console.log(`[findSymbol] Encontrado símbolo '${name}' com tipo '${s.type}' no escopo ${s.scope}`);
      return s;
    }
  }
  reportError(`Variável '${name}' não declarada no escopo atual (${currentScope})`);
  return { name, type: 'undefined', scope: currentScope };
}

/* ----------- verificação de tipos ------------ */
function typeEquals(t1, t2) {
  if (!t1 || !t2) {
    console.warn(`[typeEquals] Tipo indefinido comparado: '${t1}' vs '${t2}'`);
    return false;
  }
  if (t1 === 'undefined' || t2 === 'undefined') {
    console.warn(`[typeEquals] Tipo 'undefined' envolvido: '${t1}' vs '${t2}'`);
    return false;
  }

  if (t1.endsWith('*') && t2.endsWith('*')) {
    console.log(`[typeEquals] Comparando ponteiros: '${t1}' vs '${t2}' -> igual`);
    return true; // aceitando equivalência simplificada para ponteiros
  }

  if (t1 === t2) {
    console.log(`[typeEquals] Tipos iguais: '${t1}'`);
    return true;
  }

  const num  = v => ['int','char'].includes(v);
  const real = v => ['float','double'].includes(v);
  const res = (num(t1) && real(t2)) || (num(t2) && real(t1));
  console.log(`[typeEquals] Promoção numérica entre '${t1}' e '${t2}': ${res}`);
  return res;
}

/* helper genérico para binários */
function checkBin(op, lhs, rhs) {
  if (!lhs || !rhs) {
    reportError(`Operandos indefinidos na operação '${op}'`);
    return { type: 'undefined' };
  }
  if (!typeEquals(lhs.type, rhs.type)) {
    reportError(`Tipos incompatíveis em '${op}': ${lhs.type} vs ${rhs.type}`);
    return { type: 'undefined' };
  }
  console.log(`[checkBin] Operação '${op}' com tipos compatíveis: ${lhs.type} vs ${rhs.type}`);

  const toInt = ['<','>','<=','>=','==','!=','&&','||','&','|','^','<<','>>'];
  const resultType = toInt.includes(op) ? 'int' : lhs.type;
  console.log(`[checkBin] Tipo resultante: ${resultType}`);
  return { type: resultType };
}

/* tipo da declaração corrente (usado em init_declarator) */
let __tipoDecl = null;

/* Função para obter erros semânticos */
function getSemanticErrors() {
  return semanticErrors;
}


// Declarar funções e macros padrão da libc para evitar erros
addSymbol('printf', 'function');
addSymbol('scanf', 'function');
addSymbol('malloc', 'void*');
addSymbol('free', 'function');
addSymbol('exit', 'function');
addSymbol('NULL', 'void*');
//addSymbol('sizeof', 'function'); // Função para 'sizeof'
addSymbol('memset', 'function'); // Exemplo de outra função de C

// Palavras reservadas em C
addSymbol('auto', 'keyword');
addSymbol('break', 'keyword');
addSymbol('case', 'keyword');
addSymbol('char', 'keyword');
addSymbol('const', 'keyword');
addSymbol('continue', 'keyword');
addSymbol('default', 'keyword');
addSymbol('do', 'keyword');
addSymbol('double', 'keyword');
addSymbol('else', 'keyword');
addSymbol('enum', 'keyword');
addSymbol('extern', 'keyword');
addSymbol('float', 'keyword');
addSymbol('for', 'keyword');
addSymbol('goto', 'keyword');
addSymbol('if', 'keyword');
addSymbol('int', 'keyword');
addSymbol('long', 'keyword');
addSymbol('register', 'keyword');
addSymbol('return', 'keyword');
addSymbol('short', 'keyword');
addSymbol('signed', 'keyword');
addSymbol('sizeof', 'keyword');
addSymbol('static', 'keyword');
addSymbol('struct', 'keyword');
addSymbol('switch', 'keyword');
addSymbol('typedef', 'keyword');
addSymbol('union', 'keyword');
addSymbol('unsigned', 'keyword');
addSymbol('void', 'keyword');
addSymbol('volatile', 'keyword');
addSymbol('while', 'keyword');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignorar espaços */
break;
case 1:/* comentário de linha */
break;
case 2:/* comentário multilinha */
break;
case 3:return 12;
break;
case 4:return 119;
break;
case 5:return 28;
break;
case 6:return 94;
break;
case 7:return 81;
break;
case 8:return 33;
break;
case 9:return 26;
break;
case 10:return 93;
break;
case 11:return 83;
break;
case 12:return 89;
break;
case 13:return 36;
break;
case 14:return 86;
break;
case 15:return 154;
break;
case 16:return 31;
break;
case 17:return 35;
break;
case 18:return 90;
break;
case 19:return 92;
break;
case 20:return 85;
break;
case 21:return 34;
break;
case 22:return 42;
break;
case 23:return 29;
break;
case 24:return 95;
break;
case 25:return 41;
break;
case 26:return 43;
break;
case 27:return 142;
break;
case 28:return 30;
break;
case 29:return 45;
break;
case 30:return 87;
break;
case 31:return 32;
break;
case 32:return 153;
break;
case 33:return 44;
break;
case 34:return 37;
break;
case 35:return 27;
break;
case 36:return 88;
break;
case 37:return 13;
break;
case 38:return 11;
break;
case 39:return 139;
break;
case 40:return 140;
break;
case 41:return 121;
break;
case 42:return 122;
break;
case 43:return 126;
break;
case 44:return 127;
break;
case 45:return 113;
break;
case 46:return 111;
break;
case 47:return 106;
break;
case 48:return 107;
break;
case 49:return 129;
break;
case 50:return 130;
break;
case 51:return 98;
break;
case 52:return 99;
break;
case 53:return 100;
break;
case 54:return 101;
break;
case 55:return 102;
break;
case 56:return 103;
break;
case 57:return 104;
break;
case 58:return 105;
break;
case 59:return 147;
break;
case 60:return 115;
break;
case 61:return 117;
break;
case 62:return 143;
break;
case 63:return 109;
break;
case 64:return 82;
break;
case 65:return 61;
break;
case 66:return 63;
break;
case 67:  enterScope(); return 46; 
break;
case 68:  exitScope(); return 48; 
break;
case 69:return 59;
break;
case 70:return 60;
break;
case 71:return 52;
break;
case 72:return 20;
break;
case 73:return 10;
break;
case 74:return 146;
break;
case 75:return 132;
break;
case 76:return 133;
break;
case 77:return 58;
break;
case 78:return 135;
break;
case 79:return 136;
break;
case 80:return 54;
break;
case 81:return 124;
break;
case 82:return 125;
break;
case 83:return 150;
break;
case 84:return 149;
break;
case 85:return 151;
break;
case 86:return 17;
break;
case 87:return 14;
break;
case 88:return 5;
break;
case 89: console.error("Caractere desconhecido: " + yy_.yytext); return 'UNKNOWN'; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/[^\n]*)/,/^(?:\/\*[\s\S]*?\*\/)/,/^(?:<[A-Za-z0-9_\/\.]+>)/,/^(?:&)/,/^(?:auto\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:char\b)/,/^(?:const\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:enum\b)/,/^(?:extern\b)/,/^(?:float\b)/,/^(?:for\b)/,/^(?:goto\b)/,/^(?:if\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:register\b)/,/^(?:return\b)/,/^(?:short\b)/,/^(?:signed\b)/,/^(?:sizeof\b)/,/^(?:static\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:typedef\b)/,/^(?:union\b)/,/^(?:unsigned\b)/,/^(?:void\b)/,/^(?:volatile\b)/,/^(?:while\b)/,/^(?:define\b)/,/^(?:include\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<<=)/,/^(?:>>=)/,/^(?:<<)/,/^(?:>>)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\|=)/,/^(?:\^=)/,/^(?:->)/,/^(?:\|)/,/^(?:\^)/,/^(?:!)/,/^(?:\?)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:;)/,/^(?:#)/,/^(?:\.)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:=)/,/^(?:<)/,/^(?:>)/,/^(?:[0-9]+\.[0-9]+([eE][+-]?[0-9]+)?)/,/^(?:[0-9]+)/,/^(?:'([^\\\']|\\.)')/,/^(?:"(\\.|[^"\\])*")/,/^(?:[A-Za-z_][A-Za-z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = compilador;
exports.Parser = compilador.Parser;
exports.parse = function () { return compilador.parse.apply(compilador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}