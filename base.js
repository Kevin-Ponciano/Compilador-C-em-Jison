/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var base = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[1,14],$Vc=[1,15],$Vd=[1,16],$Ve=[1,17],$Vf=[1,18],$Vg=[1,19],$Vh=[1,23],$Vi=[1,24],$Vj=[1,28],$Vk=[1,34],$Vl=[1,38],$Vm=[1,39],$Vn=[1,40],$Vo=[1,36],$Vp=[1,37],$Vq=[1,35],$Vr=[1,42],$Vs=[1,43],$Vt=[1,44],$Vu=[1,45],$Vv=[1,46],$Vw=[1,47],$Vx=[1,48],$Vy=[1,49],$Vz=[1,50],$VA=[1,51],$VB=[1,52],$VC=[1,53],$VD=[1,54],$VE=[1,55],$VF=[1,56],$VG=[1,57],$VH=[1,58],$VI=[5,6,7,8,9,12,13,14,15,16,17,19,21,23,24,25,26,27,28,29,30,31,32],$VJ=[1,65],$VK=[1,66],$VL=[5,6,7,8,9,12,13,14,15,16,17,19,21,23,24,25,26,27,28,29,30,31,32,34,35,36,37,40,42,46,47,51,57,63,64,65,67,68,71],$VM=[1,67],$VN=[1,68],$VO=[1,69],$VP=[1,73],$VQ=[1,74],$VR=[1,71],$VS=[1,72],$VT=[1,76],$VU=[1,75],$VV=[2,39],$VW=[5,6,7,8,9,12,13,14,15,16,17,19,21,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,42,46,47,51,57,63,64,65,67,68,71],$VX=[1,86],$VY=[1,85],$VZ=[1,87],$V_=[5,16,17,19,21,23],$V$=[1,112],$V01=[1,114],$V11=[1,113],$V21=[5,6,7,8,9,12,13,14,15,16,17,19,21,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,40,42,46,47,51,57,63,64,65,67,68,71],$V31=[2,41],$V41=[5,6,7,16,17,19,21,23,24,25,26,27,28,29,30],$V51=[5,6,7,8,9,16,17,19,21,23,24,25,26,27,28,29,30],$V61=[5,16,17,19,21,23,24,25,26,27,28,29,30],$V71=[13,19],$V81=[1,187],$V91=[1,201],$Va1=[1,202],$Vb1=[1,203],$Vc1=[12,23],$Vd1=[2,76],$Ve1=[23,38];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"e":4,"EOF":5,"+":6,"-":7,"*":8,"/":9,"INT_LIT":10,"F_LIT":11,",":12,";":13,":":14,".":15,"QUOTE":16,"DQUOTE":17,"(":18,")":19,"[":20,"]":21,"{":22,"}":23,"<":24,">":25,"=":26,"LE":27,"GE":28,"EQ":29,"NE":30,"AND":31,"OR":32,"NOT":33,"IF":34,"SWITCH":35,"CASE":36,"BREAK":37,"DEFAULT":38,"ELSE":39,"#":40,"DEFINE":41,"FOR":42,"corpo":43,"statements":44,"statement":45,"expression_statement":46,"CONTINUE":47,"return":48,"if_stmt":49,"switch_stmt":50,"repeat_stmt":51,"for_stmt":52,"while_stmt":53,"dowhile_stmt":54,"assignment":55,"define_stmt":56,"IDF":57,"conditional_expression":58,"constant":59,"case_list":60,"default_case":61,"INTS_LIT":62,"FLOAT":63,"INT":64,"CHAR":65,"init_expr":66,"WHILE":67,"DO":68,"value_lit":69,"CHAR_LIT":70,"RETURN":71,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"+",7:"-",8:"*",9:"/",10:"INT_LIT",11:"F_LIT",12:",",13:";",14:":",15:".",16:"QUOTE",17:"DQUOTE",18:"(",19:")",20:"[",21:"]",22:"{",23:"}",24:"<",25:">",26:"=",27:"LE",28:"GE",29:"EQ",30:"NE",31:"AND",32:"OR",33:"NOT",34:"IF",35:"SWITCH",36:"CASE",37:"BREAK",38:"DEFAULT",39:"ELSE",40:"#",41:"DEFINE",42:"FOR",46:"expression_statement",47:"CONTINUE",51:"repeat_stmt",57:"IDF",63:"FLOAT",64:"INT",65:"CHAR",67:"WHILE",68:"DO",70:"CHAR_LIT",71:"RETURN"},
productions_: [0,[3,2],[4,3],[4,3],[4,3],[4,3],[4,1],[4,1],[4,2],[4,2],[4,2],[4,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[43,1],[44,2],[44,1],[45,2],[45,1],[45,2],[45,2],[45,2],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,4],[45,4],[45,3],[58,1],[58,3],[58,3],[58,1],[58,3],[58,3],[58,3],[58,3],[58,6],[58,4],[58,4],[59,1],[59,1],[59,1],[49,7],[49,5],[49,11],[49,7],[60,5],[60,4],[60,4],[60,4],[50,7],[50,8],[61,3],[62,3],[62,1],[55,5],[55,5],[55,5],[55,4],[55,10],[55,5],[55,3],[55,8],[52,11],[66,1],[66,4],[66,3],[53,7],[54,9],[69,1],[69,1],[69,1],[48,2],[48,2],[56,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
return $$[$0-1]; 
break;
case 2:
this.$ = $$[$0-2]+$$[$0];
break;
case 3:
this.$ = $$[$0-2]-$$[$0];
break;
case 4:
this.$ = $$[$0-2]*$$[$0];
break;
case 5:
this.$ = $$[$0-2]/$$[$0];
break;
case 6:
this.$ = parseInt(yytext);
break;
case 7:
this.$ = parseFloat(yytext);
break;
case 9: case 12: case 13: case 16:
this.$ = $$[$0-1];
break;
case 14: case 15: case 78: case 79:
this.$ = $$[$0-1]
break;
case 17:
this.$ = $$[$0-2]<$$[$0];
break;
case 18:
this.$ = $$[$0-2]>$$[$0];
break;
case 19:
this.$ = $$[$0-2]=$$[$0];
break;
case 20:
this.$ = $$[$0-2]<=$$[$0];
break;
case 21:
this.$ = $$[$0-2]>=$$[$0];
break;
case 22:
this.$ = $$[$0-2]==$$[$0];
break;
case 23:
this.$ = $$[$0-2]!=$$[$0];
break;
case 24:
this.$ = $$[$0-2]&&$$[$0];
break;
case 25:
this.$ = $$[$0-2]||$$[$0];
break;
case 26:
this.$ = !$$[$0];
break;
case 38:
 this.$ = (function stmts (stmts, stmt) {
const stmtsParsed = Array.isArray(stmts) ? [...stmts] : [stmts];
return [...stmtsParsed, stmt]
})($$[$0-1], $$[$0])
break;
case 39: case 74: case 75: case 76: case 77: case 80: case 102:
this.$ = $$[$0]
break;
case 40:
console.log('Expression Statement')
break;
case 41:
console.log('Case Statement');
break;
case 42:
console.log('Break Statement');
break;
case 43:
console.log('Continue Statement')
break;
case 46:
console.log('SWITCH Statement')
break;
case 57:
 this.$ = $$[$0-2] > $$[$0] ? true : false 
break;
case 58:
 this.$ = $$[$0-2] >= $$[$0] ? true : false 
break;
case 60:
 this.$ = $$[$0-2] < $$[$0] ? true : false 
break;
case 61:
 this.$ = $$[$0-2] <= $$[$0] ? true : false 
break;
case 62:
 this.$ = $$[$0-2] == $$[$0] ? true : false 
break;
case 63:
 this.$ = $$[$0-2] != $$[$0] ? true : false 
break;
case 66:
 this.$ = $$[$0-3] == $$[$0-1] ? true : false 
break;
case 67: case 68: case 69:
 this.$ = $$[$0]; 
break;
case 70:
 this.$ = $$[$0-4] ? $$[$0-2] : $$[$0]
break;
case 71:
 this.$ = $$[$0-2] ? $$[$0] : "" 
break;
case 72:
 this.$ = $$[$0-8] ? $$[$0-5] : $$[$0-1]
break;
case 73:
 this.$ = $$[$0-4] ? $$[$0-1] : "" 
break;
case 83: case 85:
 $$[$0-3] = $$[$0-1]; this.$ = $$[$0-3]
break;
case 84:
 symbolTable[$$[$0-3]] = $$[$0-1]
break;
case 86:
 symbolTable[$$[$0-2]] = $$[$0]
break;
case 93: case 94:
 $$[$0-2] = $$[$0]; this.$ = $$[$0-2]
break;
case 95:
 handleWhile($$[$0-4], $$[$0-1]) 
break;
case 100:
 this.$ = {type: "return", value: $$[$0] } 
break;
case 101:
 this.$ = symbolTable[$$[$0]]; console.log("symbol table"); console.log(symbolTable) 
break;
}
},
table: [{3:1,4:2,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{1:[3]},{5:[1,41],6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,32:$VH},o($VI,[2,6]),o($VI,[2,7]),{4:59,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{4:60,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{4:61,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{4:62,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{4:63,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{4:64,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},o($VI,[2,27],{18:$VJ}),o($VI,[2,28],{18:$VK}),o($VL,[2,29]),o([5,6,7,8,9,12,14,15,16,17,19,21,23,24,25,26,27,28,29,30,31,32],[2,30],{13:$VM}),o($VI,[2,31]),o($VI,[2,32]),o($VI,[2,33],{41:$VN}),o($VI,[2,34]),o($VI,[2,35],{18:$VO}),o($VI,[2,36]),o($VI,[2,37],{48:25,49:26,50:27,52:29,53:30,54:31,55:32,56:33,45:70,34:$VP,35:$VQ,36:$VR,37:$VS,40:$VT,42:$VU,46:$Vh,47:$Vi,51:$Vj,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq}),o($VL,$VV),{13:[1,77]},{13:[1,78]},{13:[1,79]},o($VW,[2,45]),o($VW,[2,46]),o($VW,[2,47]),o($VW,[2,48]),o($VW,[2,49]),o($VW,[2,50]),o($VW,[2,51]),o($VW,[2,52]),{6:[1,81],7:[1,80],26:[1,82]},{10:$VX,11:$VY,57:[1,84],69:83,70:$VZ},{18:[1,88]},{22:[1,89]},{57:[1,90]},{57:[1,91]},{57:[1,92]},{1:[2,1]},{4:93,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{4:94,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{4:95,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{4:96,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},o($VI,[2,8]),o($VI,[2,9]),o($VI,[2,10]),o($VI,[2,11]),{4:97,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{4:98,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{4:99,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{4:100,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{4:101,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{4:102,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{4:103,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{4:104,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{4:105,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,16:[1,106],24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,32:$VH},{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,17:[1,107],24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,32:$VH},{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,19:[1,108],24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,32:$VH},{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,21:[1,109],24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,32:$VH},{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,23:[1,110],24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,32:$VH},o($V_,[2,26],{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,32:$VH}),{10:$V$,18:$V01,57:$V11,58:111},{4:115,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},o($VW,[2,42]),{57:[1,116]},{10:[1,118],57:[1,120],64:[1,119],66:117},o($V21,[2,38]),o($VW,$V31),{13:$VM},{18:$VJ},{18:$VK},{18:$VO},{41:$VN},o($VW,[2,40]),o($VW,[2,43]),o($VW,[2,44]),{7:[1,121]},{6:[1,122],26:[1,123]},{10:[1,124]},{13:[2,100]},{13:[2,101]},o($VW,[2,97]),o($VW,[2,98]),o($VW,[2,99]),{10:$V$,18:$V01,57:$V11,58:125},{34:$VP,35:$VQ,36:$VR,37:$VS,40:$VT,42:$VU,44:126,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{26:[1,127]},{12:[1,130],13:[1,131],20:[1,129],26:[1,128]},{26:[1,132]},o($V41,[2,2],{8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,31:$VG,32:$VH}),o($V41,[2,3],{8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,31:$VG,32:$VH}),o($V51,[2,4],{12:$Vv,13:$Vw,14:$Vx,15:$Vy,31:$VG,32:$VH}),o($V51,[2,5],{12:$Vv,13:$Vw,14:$Vx,15:$Vy,31:$VG,32:$VH}),o($V61,[2,17],{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,31:$VG,32:$VH}),o($V61,[2,18],{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,31:$VG,32:$VH}),o($V61,[2,19],{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,31:$VG,32:$VH}),o($V61,[2,20],{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,31:$VG,32:$VH}),o($V61,[2,21],{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,31:$VG,32:$VH}),o($V61,[2,22],{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,31:$VG,32:$VH}),o($V61,[2,23],{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,31:$VG,32:$VH}),o($V_,[2,24],{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,32:$VH}),o($V_,[2,25],{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,32:$VH}),o($VI,[2,12]),o($VI,[2,13]),o($VI,[2,14]),o($VI,[2,15]),o($VI,[2,16]),{19:[1,133]},o($V71,[2,56],{27:[1,135],28:[1,134],29:[1,136],30:[1,137]}),{24:[1,139],25:[1,138],29:[1,140]},{4:141,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,19:[1,142],24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,32:$VH},{10:$VX,11:$VY,69:143,70:$VZ},{13:[1,144]},{13:[2,92]},{57:[1,145]},{26:[1,146]},{13:[1,147]},o([5,6,7,8,9,12,14,15,16,17,19,21,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,42,46,47,51,57,63,64,65,67,68,71],[2,55],{13:[1,148]}),{57:[1,149]},{13:[1,150]},{19:[1,151]},{23:[1,152],34:$VP,35:$VQ,36:$VR,37:$VS,40:$VT,42:$VU,45:70,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{11:[1,153]},{10:[1,154]},{10:[1,155]},{57:[1,156]},o($VW,[2,89]),{65:[1,157]},{22:[1,159],34:$VP,35:$VQ,36:$VR,37:$VS,40:$VT,42:$VU,45:158,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{10:[1,160]},{10:[1,161]},{10:[1,162]},{10:[1,163]},{7:[1,165],10:[1,164]},{10:[1,166]},{7:[1,167]},{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,19:[1,168],24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,32:$VH},{22:[1,169]},o($VW,[2,102]),{10:$V$,18:$V01,57:$V11,58:170},{26:[1,171]},{10:[1,172]},o($VW,[2,53]),o($VW,[2,54]),{20:[1,173]},o($VW,[2,86]),{22:[1,174]},{67:[1,175]},{13:[1,176]},{13:[1,177]},{21:[1,178]},{13:[1,179]},{13:[1,180]},o($V21,[2,71],{39:[1,181]}),{34:$VP,35:$VQ,36:$VR,37:$VS,40:$VT,42:$VU,44:182,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},o($V71,[2,58]),o($V71,[2,61]),o($V71,[2,62]),o($V71,[2,63]),o($V71,[2,57]),{10:[1,183]},o($V71,[2,60]),{10:[1,184]},{18:[1,185]},{36:$V81,60:186},{13:[1,188]},{10:[1,189]},{13:[2,94]},{57:[1,190]},{34:$VP,35:$VQ,36:$VR,37:$VS,40:$VT,42:$VU,44:191,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{18:[1,192]},o($VW,[2,83]),o($VW,[2,84]),{26:[1,193]},o($VW,[2,88]),o($VW,[2,85]),{34:$VP,35:$VQ,36:$VR,37:$VS,40:$VT,42:$VU,45:194,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{23:[1,195],34:$VP,35:$VQ,36:$VR,37:$VS,40:$VT,42:$VU,45:70,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},o($V71,[2,65]),o($V71,[2,66]),{4:196,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{23:[1,197],38:[1,199],61:198},{10:$V91,11:$Va1,57:$Vb1,59:200},{4:204,10:$V0,11:$V1,16:$V2,17:$V3,18:$V4,20:$V5,22:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:20,44:21,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{13:[2,93]},{21:[1,205]},{23:[1,206],34:$VP,35:$VQ,36:$VR,37:$VS,40:$VT,42:$VU,45:70,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{10:$V$,18:$V01,57:$V11,58:207},{22:[1,208]},o($VW,[2,70]),o($V21,[2,73],{39:[1,209]}),{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,19:[1,210],24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,32:$VH},o($VW,[2,78]),{23:[1,211]},{14:[1,212]},{14:[1,213]},{14:[2,67]},{14:[2,68]},{14:[2,69]},{6:$Vr,7:$Vs,8:$Vt,9:$Vu,12:$Vv,13:$Vw,14:$Vx,15:$Vy,19:[1,214],24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,32:$VH},{13:[1,215]},o($VW,[2,95]),{19:[1,216]},{10:[1,218],62:217},{22:[1,219]},o($V71,[2,64]),o($VW,[2,79]),{34:$VP,35:$VQ,36:$VR,37:$VS,40:$VT,42:$VU,45:220,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{34:$VP,35:$VQ,36:[1,224],37:$VS,40:$VT,42:$VU,44:223,45:221,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,60:222,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{22:[1,225]},o($VW,[2,90]),{13:[1,226]},{12:[1,228],23:[1,227]},o($Vc1,[2,82]),{34:$VP,35:$VQ,36:$VR,37:$VS,40:$VT,42:$VU,44:229,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},{23:[2,80]},o([34,35,37,40,42,46,47,51,57,63,64,65,67,68,71],$VV,{60:230,23:$Vd1,38:$Vd1,36:$V81}),o($Ve1,[2,75]),o($Ve1,[2,77],{48:25,49:26,50:27,52:29,53:30,54:31,55:32,56:33,45:70,34:$VP,35:$VQ,36:$VR,37:$VS,40:$VT,42:$VU,46:$Vh,47:$Vi,51:$Vj,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq}),o([23,34,35,36,37,38,40,42,46,47,51,63,64,65,67,68,71],$V31,{59:200,10:$V91,11:$Va1,57:$Vb1}),{34:$VP,35:$VQ,36:$VR,37:$VS,40:$VT,42:$VU,44:231,45:22,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},o($VW,[2,96]),{13:[1,232]},{10:[1,233]},{23:[1,234],34:$VP,35:$VQ,36:$VR,37:$VS,40:$VT,42:$VU,45:70,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},o($Ve1,[2,74]),{23:[1,235],34:$VP,35:$VQ,36:$VR,37:$VS,40:$VT,42:$VU,45:70,46:$Vh,47:$Vi,48:25,49:26,50:27,51:$Vj,52:29,53:30,54:31,55:32,56:33,57:$Vk,63:$Vl,64:$Vm,65:$Vn,67:$Vo,68:$Vp,71:$Vq},o($VW,[2,87]),o($Vc1,[2,81]),o($VW,[2,72]),o($VW,[2,91])],
defaultActions: {41:[2,1],83:[2,100],84:[2,101],118:[2,92],172:[2,94],189:[2,93],201:[2,67],202:[2,68],203:[2,69],220:[2,80]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:console.log('Token CHAR'); return 65;
break;
case 1:console.log('Token DOUBLE'); return 'DOUBLE';
break;
case 2:console.log('Token FLOAT'); return 63;
break;
case 3:console.log('Token INT'); return 64;
break;
case 4:console.log('Token LONG'); return 'LONG';
break;
case 5:console.log('Token SHORT'); return 'SHORT';
break;
case 6:console.log('Token SIGNED'); return 'SIGNED';
break;
case 7:console.log('Token UNSIGNED'); return 'UNSIGNED';
break;
case 8:console.log('Token VOID'); return 'VOID';
break;
case 9:console.log('Token IF'); return 34;
break;
case 10:console.log('Token ELSE'); return 39;
break;
case 11:console.log('Token SWITCH'); return 35;
break;
case 12:console.log('Token CASE'); return 36;
break;
case 13:console.log('Token DEFAULT'); return 38;
break;
case 14:console.log('Token WHILE'); return 67;
break;
case 15:console.log('Token DO'); return 68;
break;
case 16:console.log('Token FOR'); return 42;
break;
case 17:console.log('Token BREAK'); return 37;
break;
case 18:console.log('Token CONTINUE'); return 47;
break;
case 19:console.log('Token GOTO'); return 'GOTO';
break;
case 20:console.log('Token AUTO'); return 'AUTO';
break;
case 21:console.log('Token EXTERN'); return 'EXTERN';
break;
case 22:console.log('Token REGISTER'); return 'REGISTER';
break;
case 23:console.log('Token STATIC'); return 'STATIC';
break;
case 24:console.log('Token TYPEDEF'); return 'TYPEDEF';
break;
case 25:console.log('Token SIZEOF'); return 'SIZEOF';
break;
case 26:console.log('Token STRUCT'); return 'STRUCT';
break;
case 27:console.log('Token UNION'); return 'UNION';
break;
case 28:console.log('Token ENUM'); return 'ENUM';
break;
case 29:console.log('Token RETURN'); return 71;
break;
case 30:console.log('Token CONST'); return 'CONST';
break;
case 31:console.log('Token VOLATILE'); return 'VOLATILE';
break;
case 32:console.log('Token #'); return 40;
break;
case 33:console.log('Token DEFINE'); return 41;
break;
case 34:console.log('Token INCLUDE'); return 'INCLUDE';
break;
case 35:console.log('Token IDENTIFICADOR'); return 'IDENTIFICADOR';
break;
case 36:console.log('Token INTEIRO'); return 'INTEIRO';
break;
case 37:console.log('Token DECIMAL'); return 'DECIMAL';
break;
case 38:console.log('Token ATRIBUICAO'); return 26;
break;
case 39:console.log('Token SOMA'); return 6;
break;
case 40:console.log('Token SUBTRACAO'); return 7;
break;
case 41:console.log('Token MULTIPLICACAO'); return 8;
break;
case 42:console.log('Token DIVISAO'); return 9;
break;
case 43:console.log('Token MODULO'); return '%';
break;
case 44:console.log('Token IGUAL'); return '==';
break;
case 45:console.log('Token DIFERENTE'); return '!=';
break;
case 46:console.log('Token MENOR'); return 24;
break;
case 47:console.log('Token MAIOR'); return 25;
break;
case 48:console.log('Token MENORIGUAL'); return '<=';
break;
case 49:console.log('Token MAIORIGUAL'); return '>=';
break;
case 50:console.log('Token AND'); return '&&';
break;
case 51:console.log('Token OR'); return '||';
break;
case 52:console.log('Token NOT'); return '!';
break;
case 53:console.log('Token INCREMENTO'); return '++';
break;
case 54:console.log('Token DECREMENTO'); return '--';
break;
case 55:console.log('Token BIT_AND'); return '&';
break;
case 56:console.log('Token BIT_OR'); return '|';
break;
case 57:console.log('Token BIT_XOR'); return '^';
break;
case 58:console.log('Token BIT_NOT'); return '~';
break;
case 59:console.log('Token SHIFT_ESQUERDA'); return '<<';
break;
case 60:console.log('Token SHIFT_DIREITA'); return '>>';
break;
case 61:console.log('Token ABRE_PARENTESE'); return 18;
break;
case 62:console.log('Token FECHA_PARENTESE'); return 19;
break;
case 63:console.log('Token ABRE_CHAVE'); return 22;
break;
case 64:console.log('Token FECHA_CHAVE'); return 23;
break;
case 65:console.log('Token ABRE_COLCHETE'); return 20;
break;
case 66:console.log('Token FECHA_COLCHETE'); return 21;
break;
case 67:console.log('Token PONTO_E_VIRGULA'); return 13;
break;
case 68:console.log('Token VIRGULA'); return 12;
break;
case 69:console.log('Token PONTO'); return 15;
break;
case 70:console.log('Token STRING'); return 'STRING';
break;
case 71:console.log('Token CARACTERE'); return 'CARACTERE';
break;
case 72:console.log('Comentário de linha');
break;
case 73:console.log('Comentário de bloco');
break;
case 74: /* Ignorar espaços em branco */ 
break;
case 75:console.log('Erro léxico: caractere [', yy_.yytext, '] não reconhecido.');
break;
case 76:console.log('Token EOF'); return 5;
break;
}
},
rules: [/^(?:char\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:short\b)/,/^(?:signed\b)/,/^(?:unsigned\b)/,/^(?:void\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:goto\b)/,/^(?:auto\b)/,/^(?:extern\b)/,/^(?:register\b)/,/^(?:static\b)/,/^(?:typedef\b)/,/^(?:sizeof\b)/,/^(?:struct\b)/,/^(?:union\b)/,/^(?:enum\b)/,/^(?:return\b)/,/^(?:const\b)/,/^(?:volatile\b)/,/^(?:#)/,/^(?:define\b)/,/^(?:include\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[0-9]+)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:~)/,/^(?:<<)/,/^(?:>>)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:".*")/,/^(?:'.')/,/^(?:\/\/.*)/,/^(?:\/\*[^*]*\*\/)/,/^(?:[ \t\n\r]+)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = base;
exports.Parser = base.Parser;
exports.parse = function () { return base.parse.apply(base, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}